Battery Thermal
1004
542
17
GroupBox

1
7
Name
5
14
Thermal Group 
X
3
9
Y
3
3
Width
3
985
Height
3
533
Caption
5
16
Thermal Behavior
Bold
2
1
Numeric

1
16
Name
5
7
batt_Cp
X
3
138
Y
3
51
Width
3
51
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
17
batt_h_to_ambient
X
3
129
Y
3
120
Width
3
54
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
9
batt_mass
X
3
492
Y
3
408
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
28
batt_room_temperature_single
X
3
213
Y
3
216
Width
3
36
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
DataArray

1
9
Name
5
28
batt_room_temperature_vector
X
3
213
Y
3
246
Width
3
90
Height
3
24
Mode
3
1
Label
5
0
Description
5
0
TabOrder
3
4294967295
Numeric

1
16
Name
5
29
batt_specific_energy_per_mass
X
3
237
Y
3
408
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
31
batt_specific_energy_per_volume
X
3
237
Y
3
435
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Label

1
12
Name
5
22
batt_temperature_input
X
3
54
Y
3
159
Width
3
225
Height
3
24
Caption
5
37
Choose environment temperature option
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
0
AlignRight
2
0
AlignTop
2
0
Choice

1
8
Name
5
19
batt_thermal_choice
X
3
54
Y
3
186
Width
3
249
Height
3
24
Items
6
3
Set to ambient temperature
Enter single fixed temperature
Enter time series temperature
Selection
3
4294967295
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
batt_volume
X
3
492
Y
3
435
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Image

1
7
Name
5
21
battery_thermal_image
X
3
66
Y
3
36
Width
3
198
Height
3
123
Image
7
Battery Thermal_battery_thermal_image.png
Centered
2
1
DataMatrix

1
23
Name
5
11
cap_vs_temp
X
3
330
Y
3
21
Width
3
277
Height
3
255
PasteAppendRows
2
1
PasteAppendCols
2
0
ShowRows
2
1
ShowRowLabels
2
0
RowLabels
5
0
ShadeR0C0
2
0
ShadeC0
2
0
ShowCols
2
0
ShowColLabels
2
1
ColLabels
5
20
Temp (C),Capacity(%)
NumRowsLabel
5
5
Rows:
NumColsLabel
5
5
Cols:
Layout
3
1
ChoiceColumn
3
4294967295
Choices
5
15
Choice1,Choice2
HideColumn
3
4294967295
ShowColumn
3
4294967295
ColorMap
2
0
Divider

1
9
Name
5
9
object 22
X
3
27
Y
3
381
Width
3
582
Height
3
34
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
19
Physical properties
Bold
2
1
Plot

1
5
Name
5
16
plot_cap_vs_temp
X
3
618
Y
3
21
Width
3
322
Height
3
303
Label

1
12
Name
5
19
thermal_model_label
X
3
36
Y
3
471
Width
3
906
Height
3
45
Caption
5
219
This section does not model power used for thermal conditioning. If the battery requires operation of heating or cooling equipment, the associated electricity use can be entered in the ‘Additional System Losses’ section
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
12
Name
5
20
thermal_model_label5
X
3
24
Y
3
288
Width
3
306
Height
3
87
Caption
5
156
Model assumes battery with specific heat Cp sits in environment of specified temperature.  Heat transfer to room proportional to heat transfer coefficient h
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1

14
batt_Cp
3
1
Cp
J/KgK
Battery
0
2
1
1
1
1
4183
Numeric
batt_h_to_ambient
3
1
h
W/m2K
Battery
0
2
1
1
1
1
5
Numeric
batt_height
3
1
Battery height
m
Battery
0
10
1
1
1
1
0.425
Numeric
batt_length
3
1
Battery length
m
Battery
0
10
1
1
1
1
0.25
Numeric
batt_mass
3
1
Battery mass
kg
Battery
0
8
1
1
1
1
56
Numeric
batt_room_temperature_celsius
3
2
 Calculated environment temperature
C
Battery
0
8
1
2
1
1
0
Default
batt_room_temperature_single
3
1
Environment temperature
C
Battery
23
Environment temperature
2
1
1
1
1
20
Numeric
batt_room_temperature_vector
3
2
Environment temperature
C
Battery
23
Environment temperature
0
1
2
1
1
0
DataArray
batt_specific_energy_per_mass
3
1
Specific energy per mass
Wh/kg
Battery
0
2
1
1
1
1
150
Numeric
batt_specific_energy_per_volume
3
1
Specific energy per volume
Wh/L
Battery
0
2
1
1
1
1
300
Numeric
batt_thermal_choice
3
1
Choose temperature option
 
Battery
0
1
1
1
1
1
0
Choice
batt_volume
3
1
Battery volume
m3
Battery
0
8
1
1
1
1
0.001
Numeric
batt_width
3
1
Battery width
m
Battery
0
10
1
1
1
1
0.181
Numeric
cap_vs_temp
3
3
Capacity vs temperature
 
Battery
0
1
1
3
4
2
-15 65 
0 85 
25 100 
40 104 

DataArray

1650
equations{'batt_mass'} = define()
{
	return (${batt_computed_bank_capacity}*1000)/${batt_specific_energy_per_mass};
};
equations{'batt_volume'} = define()
{
	// m3
	return ${batt_computed_bank_capacity}/${batt_specific_energy_per_volume};
};
equations{'batt_length'} = define()
{
	// assume cube
	return pow(${batt_volume},0.3333333);
};
equations{'batt_width'} = define()
{
	// assume cube
	return pow(${batt_volume},0.3333333);
};
equations{'batt_height'} = define()
{
	// assume cube
	return pow(${batt_volume},0.3333333);
};
equations{'batt_room_temperature_celsius'} = define()
{
	if (technology() != 'Generic System')
	{
		wfread = ssc_create();
		solar_resource =  ${solar_resource_file};
		if (file_exists(solar_resource))
		{
			//msgbox(solar_resource);
			ssc_var(wfread, "file_name", solar_resource);
			ssc_var(wfread, "header_only", 0);
			
			T = [];
			if (!ssc_exec(wfread, "wfreader")){
				T = ssc_var(wfread, "tdry");
			}
			else {
				msgbox('failed');
				return 0;
			}
		}
		else {
			// unknown, perhaps solar resource callback isn't complete
			return 0;
		}
	}
	else {
		len = 8760;
		if (${spec_mode} == 1){
			T = ${energy_output_array};
			len = #T;
		}
		for (i = 0; i < len; i++){
			T[i] = 20;
		}
	}
	
	// initialize to ambient
	T_ambient = T;
	
	// Single value, scale to input size
	if (${batt_thermal_choice} == 1){
		T_room = ${batt_room_temperature_single};
		for (i = 0; i < #T; i++){
			T_ambient[i] = T_room;
		}
	}
	// Input time series
	if (${batt_thermal_choice} == 2){
		T_room = ${batt_room_temperature_vector};
		for (i = 0; i < #T_room; i++){
			T_ambient[i] = T_room[i];
		}
	}
	return T_ambient;
};
1151
on_load{'Battery Thermal'} = define() {
	on_change{'cap_vs_temp'}(); // update the plot
	on_change{'batt_thermal_choice'}();
	
	show_thermal_options;
};

function show_thermal_options()
{
	tech = technology();

	// there is no weather data in generic model
	if (tech == 'Generic System' && ${batt_thermal_choice}==0){
		${batt_thermal_choice} = 1;
		msgbox('Generic system has no weather file, cannot set to ambient temperature');
	}
	enable('batt_room_temperature_single', ${batt_thermal_choice}==1);
	enable('batt_room_temperature_vector', ${batt_thermal_choice}==2);
}

on_change{'batt_thermal_choice'} = define()
{
	show_thermal_options();
};

on_change{ 'cap_vs_temp' } = define() {

	setplot( 'plot_cap_vs_temp' );
	
	cvt = ${cap_vs_temp};
	for( i=0;i<#cvt;i++ ) {
		T[i] = cvt[i][0];
		C[i] = cvt[i][1];
	}
	
	Tmin = min(T);
	Tmax = max(T);
	Tadj = 0.1*(Tmax-Tmin);
	
	clearplot();
	plot( T, C, {'thick'=2, 'type'='line', 'color'='blue'});
	plotopt( {'title'='Capacity fade', 'legend'=false });
	axis( 'x1', {'label'='Temperature (C)', 'min'=Tmin-Tadj, 'max'=Tmax+Tadj});
	axis( 'y1', {'label'='Effective capacity (%)', 'min'=0, 'max'=110});
};